import os
import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# ===================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====================
API_TOKEN = os.getenv("API_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1001234567890"))  # ID –∫–∞–Ω–∞–ª–∞
ADMINS = list(map(int, os.getenv("ADMINS", "").split(",")))  # —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

WORDS_FILE = "words.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# ===================== –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏ =====================
def load_words():
    try:
        with open(WORDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_words(words):
    with open(WORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, ensure_ascii=False, indent=4)


# ===================== –•—ç–Ω–¥–ª–µ—Ä—ã =====================
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.")


@dp.message(Command("addword"))
async def add_word(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addword <—Å–ª–æ–≤–æ>")
    word = parts[1].strip().lower()
    words = load_words()
    if word in words:
        return await message.answer("‚ö†Ô∏è –°–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    words.append(word)
    save_words(words)
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")


@dp.message(Command("delword"))
async def del_word(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delword <—Å–ª–æ–≤–æ>")
    word = parts[1].strip().lower()
    words = load_words()
    if word not in words:
        return await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç.")
    words.remove(word)
    save_words(words)
    await message.answer(f"üóë –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.")


@dp.message(Command("listwords"))
async def list_words(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    words = load_words()
    if not words:
        return await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    await message.answer("üìå –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(words))


@dp.message(Command("getid"))
async def get_id(message: types.Message):
    await message.answer(f"‚ÑπÔ∏è Chat ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{message.chat.id}`", parse_mode="Markdown")


@dp.message()
async def check_word(message: types.Message):
    word = message.text.strip().lower()
    words = load_words()

    if word in words:
        # —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É
        invite = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1
        )
        await message.answer(
            f"‚úÖ –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –≤–µ—Ä–Ω–æ–µ!\n–í–æ—Ç –≤–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {invite.invite_link}"
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# ===================== –ó–∞–ø—É—Å–∫ =====================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
