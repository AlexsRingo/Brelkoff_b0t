import os
import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# ===================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====================
API_TOKEN = os.getenv("API_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
INSTRUCTION_CHANNEL_ID = int(os.getenv("INSTRUCTION_CHANNEL_ID", "-1001234567890"))  # –∫–∞–Ω–∞–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
NEWS_CHANNEL_USERNAME = os.getenv("NEWS_CHANNEL_USERNAME", "@brelkof")  # –ø—É–±–ª–∏—á–Ω—ã–π username –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏)
ADMINS = list(map(int, os.getenv("ADMINS", "").split(",")))

WORDS_FILE = "words.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ===================== –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏ =====================
def load_words():
    try:
        with open(WORDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_words(words):
    with open(WORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, ensure_ascii=False, indent=4)

# ===================== –•—ç–Ω–¥–ª–µ—Ä—ã =====================
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç!  \n"
        "–ù–∞ —Å–≤—è–∑–∏ –î–∞—à–∞ - –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –±—Ä–µ–Ω–¥–∞ BRELKOF.\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏)\n"
        "–ú—ã –¥–µ–ª–∞–µ–º –≤—Å–µ, —á—Ç–æ–±—ã —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª—Å—è —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª—é—à–µ–≤—ã–π –∑–∞–π—á–∏–∫)\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –ª–∏—Å—Ç–æ–≤–∫–∏:\n"
        "–ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /slovo"
    )
    await message.answer(text)

@dp.message(Command("slovo"))
async def ask_word(message: types.Message):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")

@dp.message(Command("addword"))
async def add_word(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addword <—Å–ª–æ–≤–æ>")
    word = parts[1].strip().lower()
    words = load_words()
    if word in words:
        return await message.answer("‚ö†Ô∏è –°–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    words.append(word)
    save_words(words)
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

@dp.message(Command("listwords"))
async def list_words(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    words = load_words()
    if not words:
        return await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    await message.answer("üìå –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(words))

@dp.message()
async def check_word(message: types.Message):
    word = message.text.strip().lower()
    words = load_words()

    if word in words:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª BRELKOF", url=f"https://t.me/{NEWS_CHANNEL_USERNAME.strip('@')}")
        )
        await message.answer(
            "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n"
            "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫–∞–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª BRELKOF.\n"
            "–ò–º–µ–Ω–Ω–æ —Ç–∞–º –±—É–¥—É—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –∫–æ–Ω–∫—É—Ä—Å—ã –∏ –∞–Ω–æ–Ω—Å—ã –Ω–∞–±–æ—Ä–æ–≤!",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(Command("checksub"))
async def check_subscription(message: types.Message):
    try:
        member = await bot.get_chat_member(chat_id=NEWS_CHANNEL_USERNAME, user_id=message.from_user.id)
        if member.status in ["member", "administrator", "creator"]:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Üí –≤—ã–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            bingo_btn = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üéØ –ë–ò–ù–ì–û", callback_data="bingo")
            )
            invite = await bot.create_chat_invite_link(
                chat_id=INSTRUCTION_CHANNEL_ID,
                member_limit=1
            )
            await message.answer(
                "–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ!\n"
                "–ê –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å –ë–ò–ù–ì–û üéâ\n"
                "–í—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–∫–∏–¥–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.",
                reply_markup=bingo_btn
            )
            await message.answer(
                "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!\n–ñ–µ–ª–∞—é —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ –≤—Ä–µ–º—è)\n\n"
                f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {invite.invite_link}"
            )
        else:
            await message.answer("‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª BRELKOF!")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –±–æ—Ç —Ç–∞–º –∞–¥–º–∏–Ω.")

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∏–Ω–≥–æ
@dp.callback_query()
async def bingo_callback(callback: types.CallbackQuery):
    if callback.data == "bingo":
        await callback.message.answer("üéØ –†–∞–∑–¥–µ–ª –ë–ò–ù–ì–û –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòâ")

# ===================== AIOHTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render =====================
async def handle(request):
    return web.Response(text="Bot is running")

async def start_web_app():
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.getenv("PORT", 5000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# ===================== –ó–∞–ø—É—Å–∫ =====================
async def main():
    asyncio.create_task(start_web_app())  # –∑–∞–ø—É—Å–∫–∞–µ–º web-—Å–µ—Ä–≤–µ—Ä
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
