\
import os
import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web

API_TOKEN = os.getenv("API_TOKEN")
ADMINS = list(map(int, os.getenv("ADMINS", "").split(","))) if os.getenv("ADMINS") else []
SUPPORT_CONTACT = os.getenv("SUPPORT_CONTACT", "@Dashq0")

WELCOME_PIC = os.getenv("WELCOME_PIC", "https://placekitten.com/800/500")
CODE_ACCEPTED_PIC = os.getenv("CODE_ACCEPTED_PIC")
BINGO_PIC = os.getenv("BINGO_PIC", "https://placekitten.com/800/400")
INSTRUCTION_PIC = os.getenv("INSTRUCTION_PIC")

NEWS_CHANNEL_ID = os.getenv("NEWS_CHANNEL_ID", "")
NEWS_CHANNEL_LINK = os.getenv("NEWS_CHANNEL_LINK", "https://t.me/")

WORDS_FILE = "words.json"
STATE_FILE = "state.json"
USERS_FILE = "users.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def _load_json(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def _save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_words():
    return _load_json(WORDS_FILE, {})

def save_words(d):
    _save_json(WORDS_FILE, d)

def load_state():
    return _load_json(STATE_FILE, {})

def save_state(d):
    _save_json(STATE_FILE, d)

def load_users():
    return _load_json(USERS_FILE, [])

def save_users(lst):
    _save_json(USERS_FILE, lst)

def add_user(user_id: int):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        save_users(users)

def norm_chat_ref(v: str):
    v = (v or "").strip()
    if v.startswith("-100"):
        return int(v)
    if v.startswith("@"):
        return v
    return f"@{v}" if v else v

def reply_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–°–¢–ê–†–¢"), KeyboardButton(text="–ë–ò–ù–ì–û")]],
        resize_keyboard=True
    )

def subscribe_kb():
    kb = InlineKeyboardBuilder()
    if NEWS_CHANNEL_LINK:
        kb.button(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=NEWS_CHANNEL_LINK)
    kb.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="checksub")
    kb.adjust(1)
    return kb.as_markup()

async def handle(_):
    return web.Response(text="Bot is running")

async def start_web_app():
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.getenv("PORT", 5000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    add_user(message.from_user.id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–ù–∞ —Å–≤—è–∑–∏ –î–∞—à–∞ ‚Äî –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –±—Ä–µ–Ω–¥–∞ BRELKOF.\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! üíõ\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –≤–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –ª–∏—Å—Ç–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /slovo\n\n"
        f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_CONTACT}"
    )
    try:
        await message.answer_photo(WELCOME_PIC, caption=text, reply_markup=reply_kb())
    except Exception:
        await message.answer(text, reply_markup=reply_kb())

@dp.message(F.text.casefold() == "—Å—Ç–∞—Ä—Ç")
async def btn_start(message: types.Message):
    await cmd_start(message)

@dp.message(Command("slovo"))
async def cmd_slovo(message: types.Message):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")

@dp.message(Command("getid"))
async def cmd_getid(message: types.Message):
    await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id} | –¢–∏–ø: {message.chat.type}")

async def process_code_word(message: types.Message, word_text: str):
    word = word_text.strip().lower()
    words = load_words()
    cfg = words.get(word)
    if not cfg:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=reply_kb())

    state = load_state()
    uid = str(message.from_user.id)
    state[uid] = state.get(uid, {})
    state[uid]["word"] = word
    save_state(state)

    intro_text = (
        "‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n"
        "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫–∞–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª BRELKOF.\n"
        "–ò–º–µ–Ω–Ω–æ —Ç–∞–º –±—É–¥—É—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –∫–æ–Ω–∫—É—Ä—Å—ã –∏ –∞–Ω–æ–Ω—Å—ã –Ω–∞–±–æ—Ä–æ–≤!"
    )
    try:
        if CODE_ACCEPTED_PIC:
            await message.answer_photo(CODE_ACCEPTED_PIC, caption=intro_text, reply_markup=subscribe_kb())
        else:
            await message.answer(intro_text, reply_markup=subscribe_kb())
    except Exception:
        await message.answer(intro_text, reply_markup=subscribe_kb())

@dp.callback_query(F.data == "checksub")
async def cb_checksub(callback: types.CallbackQuery):
    uid = str(callback.from_user.id)
    state = load_state()
    user_state = state.get(uid, {})
    current_word = user_state.get("word")

    if not current_word:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ /slovo.")
        return

    try:
        chat_for_check = norm_chat_ref(NEWS_CHANNEL_ID)
        member = await bot.get_chat_member(chat_for_check, callback.from_user.id)
        if getattr(member, "status", None) not in ("member", "administrator", "creator"):
            return await callback.message.answer("‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª BRELKOF!")
    except Exception as e:
        return await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    words = load_words()
    cfg = words.get(current_word, {})
    deliver_text = "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!\n–ñ–µ–ª–∞—é —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ –≤—Ä–µ–º—è)\n\n"

    prev_link = user_state.get("issued_link")

    if cfg.get("type") == "id":
        if prev_link:
            msg = deliver_text + f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {prev_link}"
            if INSTRUCTION_PIC:
                await callback.message.answer_photo(INSTRUCTION_PIC, caption=msg)
            else:
                await callback.message.answer(msg)
        else:
            try:
                invite = await bot.create_chat_invite_link(chat_id=cfg["value"], member_limit=1)
                link = invite.invite_link
                user_state["issued_link"] = link
                state[uid] = user_state
                save_state(state)
                msg = deliver_text + f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {link}"
                if INSTRUCTION_PIC:
                    await callback.message.answer_photo(INSTRUCTION_PIC, caption=msg)
                else:
                    await callback.message.answer(msg)
            except Exception as e:
                await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")
    elif cfg.get("type") == "link":
        link = cfg.get("value")
        msg = deliver_text + f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {link}"
        if INSTRUCTION_PIC:
            await callback.message.answer_photo(INSTRUCTION_PIC, caption=msg)
        else:
            await callback.message.answer(msg)

@dp.message(F.text == "–ë–ò–ù–ì–û")
async def btn_bingo(message: types.Message):
    try:
        if BINGO_PIC:
            await message.answer_photo(BINGO_PIC, caption="üéØ –ö–∞—Ä—Ç–æ—á–∫–∞ –ë–ò–ù–ì–û –∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!")
        else:
            await message.answer("üéØ –ö–∞—Ä—Ç–æ—á–∫–∞ –ë–ò–ù–ì–û –∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!")
    except Exception:
        await message.answer("üéØ –ö–∞—Ä—Ç–æ—á–∫–∞ –ë–ò–ù–ì–û –∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!")

@dp.message(F.text)
async def on_text(message: types.Message):
    txt = message.text.strip()
    words = load_words()
    if txt.lower() in words:
        return await process_code_word(message, txt)

async def main():
    asyncio.create_task(start_web_app())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
